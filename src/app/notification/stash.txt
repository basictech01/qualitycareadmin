"use client";

import { get } from "@/utils/network"; // Import your fetch function
import React, { useEffect, useState } from "react";

interface Notification {
  message_ar: string;
  message_en: string;
  scheduled_timestamp: string;
}

const Dashboard: React.FC = () => {
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  const fetchNotifications = async () => {
    try {
      setLoading(true);
      const data = await get("/notification");
      console.log("Fetched Notifications:", data); // Debugging line
      setNotifications(Array.isArray(data) ? data : []);
      setError(null);
    } catch (err) {
      console.error("Fetching error:", err); // Debugging line
      setError("Failed to load notifications");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchNotifications(); // Fetch on mount
    const interval = setInterval(fetchNotifications, 30000); // Polling every 30s
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="container mx-auto p-6">
      {/* Dashboard Header */}
      <h1 className="text-2xl font-bold mb-4">ðŸ“Š Dashboard</h1>

      {/* Notifications Section */}
      <div className="bg-white shadow-md rounded-lg p-4">
        <h2 className="text-xl font-bold mb-4">ðŸ”” Notifications</h2>

        {loading && <p>Loading...</p>}
        {error && <p className="text-red-500">{error}</p>}

        <div className="overflow-x-auto">
          <table className="min-w-full border border-gray-300">
            <thead>
              <tr className="bg-gray-200">
                <th className="px-4 py-2 border">Message (English)</th>
                <th className="px-4 py-2 border">Message (Arabic)</th>
                <th className="px-4 py-2 border">Scheduled Time</th>
              </tr>
            </thead>
            <tbody>
              {notifications.length > 0 ? (
                notifications.map((notification, index) => (
                  <tr key={index} className="border">
                    <td className="px-4 py-2">{notification.message_en}</td>
                    <td className="px-4 py-2 text-right">{notification.message_ar}</td>
                    <td className="px-4 py-2">
                      {new Date(notification.scheduled_timestamp).toLocaleString()}
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={3} className="text-center py-2">
                    No notifications available.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;
