"use client";

import { get } from "@/utils/network";
import React, { useEffect, useState } from "react";
import Link from "next/link";
import { Icon } from "@iconify/react/dist/iconify.js";

interface Notification {
  message_ar: string;
  message_en: string;
  scheduled_timestamp: string;
}

const Dashboard: React.FC = () => {
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState<string>("");
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [sortField, setSortField] = useState<string>("scheduled_timestamp");
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("desc");
  const pageSize = 10;

  const fetchNotifications = async () => {
    try {
      setLoading(true);
      const data = await get("/notification");
      console.log("Fetched Notifications:", data);
      setNotifications(Array.isArray(data) ? data : []);
      setError(null);
    } catch (err) {
      console.error("Fetching error:", err);
      setError("Failed to load notifications");
    } finally {
      setLoading(false);
    }
  };

  // Fetch notifications on component mount and set polling
  useEffect(() => {
    fetchNotifications();
    
    const interval = setInterval(fetchNotifications, 30000); // Polling every 30s
    
    return () => clearInterval(interval);
  }, []);

  // Handle search
  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1); // Reset to first page on new search
  };

  // Handle sorting
  const handleSort = (field: string) => {
    if (field === sortField) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc");
    } else {
      setSortField(field);
      setSortDirection("asc");
    }
  };

  // Get sortable column header class
  const getSortableColumnClass = (field: string) => {
    if (field !== sortField) return "cursor-pointer hover:bg-gray-300";
    return `cursor-pointer hover:bg-gray-300 ${
      sortDirection === "asc" ? "bg-gray-300" : "bg-gray-300"
    }`;
  };

  // Get sort icon
  const getSortIcon = (field: string) => {
    if (field !== sortField) return null;
    return sortDirection === "asc" ? "â†‘" : "â†“";
  };

  // Filter and sort notifications
  const filteredNotifications = notifications
    .filter(notification => {
      const searchLower = searchQuery.toLowerCase();
      return (
        notification.message_en.toLowerCase().includes(searchLower) ||
        notification.message_ar.toLowerCase().includes(searchLower) ||
        new Date(notification.scheduled_timestamp).toLocaleString().toLowerCase().includes(searchLower)
      );
    })
    .sort((a, b) => {
      if (sortField === "scheduled_timestamp") {
        const dateA = new Date(a.scheduled_timestamp).getTime();
        const dateB = new Date(b.scheduled_timestamp).getTime();
        return sortDirection === "asc" ? dateA - dateB : dateB - dateA;
      } else {
        const valueA = a[sortField as keyof Notification] || "";
        const valueB = b[sortField as keyof Notification] || "";
        return sortDirection === "asc"
          ? valueA.localeCompare(valueB)
          : valueB.localeCompare(valueA);
      }
    });

  // Pagination
  const totalPages = Math.ceil(filteredNotifications.length / pageSize);
  const paginatedNotifications = filteredNotifications.slice(
    (currentPage - 1) * pageSize,
    currentPage * pageSize
  );

  // Navigation buttons
  const goToPage = (page: number) => {
    if (page >= 1 && page <= totalPages) {
      setCurrentPage(page);
    }
  };

  return (
    <div className="container mx-auto p-6">
      {/* Dashboard Header */}
      <h1 className="text-2xl font-bold mb-4">ðŸ“Š Dashboard</h1>

      {/* Notifications Section */}
      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        <div className="p-4 border-b">
          <h5 className="font-bold text-lg mb-0">ðŸ”” Notifications</h5>
        </div>
        <div className="p-4">
          {/* Search Bar */}
          <div className="mb-4">
            <input
              type="text"
              placeholder="Search notifications..."
              className="w-full p-2 border rounded"
              value={searchQuery}
              onChange={handleSearch}
            />
          </div>
          
          {loading && <p className="py-4">Loading...</p>}
          {error && <p className="text-red-500 py-4">{error}</p>}
          
          {!loading && !error && (
            <div className="overflow-x-auto">
              <table className="min-w-full bg-white border">
                <thead>
                  <tr className="bg-gray-200">
                    <th className="py-2 px-4 border">
                      <div className="flex items-center">
                        <input className="mr-2" type="checkbox" />
                        <span>S.L</span>
                      </div>
                    </th>
                    <th 
                      className={`py-2 px-4 border ${getSortableColumnClass("message_en")}`}
                      onClick={() => handleSort("message_en")}
                    >
                      Message (English) {getSortIcon("message_en")}
                    </th>
                    <th 
                      className={`py-2 px-4 border ${getSortableColumnClass("message_ar")}`}
                      onClick={() => handleSort("message_ar")}
                    >
                      Message (Arabic) {getSortIcon("message_ar")}
                    </th>
                    <th 
                      className={`py-2 px-4 border ${getSortableColumnClass("scheduled_timestamp")}`}
                      onClick={() => handleSort("scheduled_timestamp")}
                    >
                      Scheduled Time {getSortIcon("scheduled_timestamp")}
                    </th>
                    <th className="py-2 px-4 border">Status</th>
                    <th className="py-2 px-4 border">Action</th>
                  </tr>
                </thead>
                <tbody>
                  {paginatedNotifications.length > 0 ? (
                    paginatedNotifications.map((notification, index) => {
                      const realIndex = (currentPage - 1) * pageSize + index;
                      const isScheduledForFuture = new Date(notification.scheduled_timestamp) > new Date();
                      
                      return (
                        <tr key={index} className="border hover:bg-gray-50">
                          <td className="py-2 px-4 border">
                            <div className="flex items-center">
                              <input className="mr-2" type="checkbox" />
                              <span>{(realIndex + 1).toString().padStart(2, '0')}</span>
                            </div>
                          </td>
                          <td className="py-2 px-4 border">{notification.message_en}</td>
                          <td className="py-2 px-4 border text-right">{notification.message_ar}</td>
                          <td className="py-2 px-4 border">{new Date(notification.scheduled_timestamp).toLocaleString()}</td>
                          <td className="py-2 px-4 border">
                            {isScheduledForFuture ? (
                              <span className="bg-yellow-100 text-yellow-800 px-3 py-1 rounded-full text-sm font-medium">
                                Pending
                              </span>
                            ) : (
                              <span className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium">
                                Sent
                              </span>
                            )}
                          </td>
                          <td className="py-2 px-4 border">
                            <div className="flex space-x-2">
                              <Link
                                href="#"
                                className="w-8 h-8 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center"
                              >
                                <Icon icon="iconamoon:eye-light" />
                              </Link>
                              <Link
                                href="#"
                                className="w-8 h-8 bg-green-100 text-green-600 rounded-full flex items-center justify-center"
                              >
                                <Icon icon="lucide:edit" />
                              </Link>
                              <Link
                                href="#"
                                className="w-8 h-8 bg-red-100 text-red-600 rounded-full flex items-center justify-center"
                              >
                                <Icon icon="mingcute:delete-2-line" />
                              </Link>
                            </div>
                          </td>
                        </tr>
                      );
                    })
                  ) : (
                    <tr>
                      <td colSpan={6} className="text-center py-4">
                        No notifications available.
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          )}
          
          {/* Pagination */}
          {!loading && !error && totalPages > 1 && (
            <div className="flex justify-between items-center mt-4">
              <div>
                Showing {(currentPage - 1) * pageSize + 1} to {Math.min(currentPage * pageSize, filteredNotifications.length)} of {filteredNotifications.length} entries
              </div>
              <div className="flex space-x-2">
                <button
                  className="px-3 py-1 border rounded disabled:opacity-50"
                  onClick={() => goToPage(currentPage - 1)}
                  disabled={currentPage === 1}
                >
                  Previous
                </button>
                {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                  // Show pages around current page
                  let pageToShow;
                  if (totalPages <= 5) {
                    pageToShow = i + 1;
                  } else if (currentPage <= 3) {
                    pageToShow = i + 1;
                  } else if (currentPage >= totalPages - 2) {
                    pageToShow = totalPages - 4 + i;
                  } else {
                    pageToShow = currentPage - 2 + i;
                  }
                  
                  return (
                    <button
                      key={i}
                      className={`px-3 py-1 border rounded ${
                        currentPage === pageToShow ? "bg-blue-500 text-white" : ""
                      }`}
                      onClick={() => goToPage(pageToShow)}
                    >
                      {pageToShow}
                    </button>
                  );
                })}
                <button
                  className="px-3 py-1 border rounded disabled:opacity-50"
                  onClick={() => goToPage(currentPage + 1)}
                  disabled={currentPage === totalPages}
                >
                  Next
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Dashboard;